plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
}

group = 'cn.aoe.sb'
version = '1.0.1'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

dependencies {
    // 父项目不需要依赖，只需要定义子项目的依赖版本
}

/* 所有子项目的通用配置 */
subprojects {
    /* 使用二进制插件 */
    apply plugin: 'java' /* java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径 */
    apply plugin: 'idea' /* 同上 让Gradle自动生成Intellij的项目文件*/
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */

    group = 'cn.aoe.sb'
    version = '1.0.1' /* 项目版本 */
    /* 指定jdk版本 */
    sourceCompatibility = '1.8'
    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        // mavenLocal()，这样gradle会使用maven本地仓库，否则gradle的本地仓库在 ${userHome}/.gradle/caches/modules-2/files-2.1
        mavenLocal()
        // 这个是指定仓库，但是会报错`dependecies detachedConfiguration4 找不到`
        // 原因是，这个仓库地址太老了，而且是http的
        // maven {  url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }

    /* 添加依赖，类似maven的 dependency 子项目可以直接继承
    * 但是，规范一些，应该是这样，父定义版本号，而有个common或core模块中定义了公共的依赖
    * maven定义了dependencyManagement 子项目依然需要使用dependency，只是不需要引入版本号了
    * gradle这里，可以让子项目，不需要引入依赖，直接继承 */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}